<브런치에서 작업 후에 파일을 원격에 올리는 방법>

파일 단위로 수정 - 즉 새 파일을 만들거나, 수정 시, 둘 다 add 부터 해줘야 함 
-> git add . 이걸 해주면 다 담긴다  -> main으로 이동해 merge를 한다 
(git merge 명령어는 **"A 브랜치의 내용을 지금 내가 있는 B 브랜치로 합친다"**는 뜻)

1. 가장 일반적인 순서 (충돌이 없을 때)
add와 commit은 merge 하기 전에 이미 완료되어 있어야 합니다.
add → commit (✅ 전에 한다)
my-feature 같은 작업 브랜치에서 내 모든 변경 사항을 미리 add하고 commit해서 저장을 해둡니다.
merge (✅ 합친다)
main 브랜치로 돌아와서 git merge my-feature를 실행합니다.
Git이 my-feature의 커밋들을 main으로 합치면서 **"merge commit"**이라는 것을 자동으로 만들어 줍니다. (내가 commit 명령을 또 칠 필요가 없어요.)
push (✅ 후에 한다)
내 로컬 main에 자동으로 커밋된 이 merge 결과를 원격 저장소로 업로드합니다.
git push origin main
즉, 일반적인 순서는 (add → commit) → merge → push 입니다.
2. 예외: 충돌(Conflict)이 났을 때
이때가 바로 질문하신 merge → add → commit → push 순서가 됩니다!

merge를 시도했는데, Git이 자동으로 합치지 못하고 충돌이 나면 작업이 중간에 멈춥니다.

merge (시도)
git merge my-feature 실행 → 💥 충돌 발생!
(수동으로 파일 수정)
충돌이 난 파일을 직접 열어서 올바르게 수정합니다.
add (✅ 후에 한다)
수정이 끝났으면, Git에게 "내가 충돌 해결 다 했다!"라고 알려주기 위해 git add .를 실행합니다.
commit (✅ 후에 한다)
이제 git commit 명령어를 실행해서 멈춰있던 merge 작업을 수동으로 완료시킵니다. (이때 커밋 메시지는 보통 자동으로 완성되어 있습니다.)
push (✅ 마지막에 한다)
충돌이 해결되고 커밋까지 완료된 main 브랜치를 원격으로 push합니다.
push를 해줘야 나의 깃 허브에 잘 보이게 됨 
=> 즉 정리하자면 
💡 가장 쉬운 비유
로컬 (내 컴퓨터):

내 바탕화면에 있는 한글(hwp) 파일 (보고서_최종.hwp).

원격 (GitHub):

팀원들과 공유하는 '구글 드라이브' 또는 '공유 폴더'.

push 명령어:

내 바탕화면에 있던 보고서_최종.hwp 파일을 '구글 드라이브'에 업로드하는 행동.

push (업로드)를 하기 전까지는, 내가 파일을 100번 고쳐 저장(commit)했어도 팀원들은 절대 알 수 없습니다.

이렇게 된다 